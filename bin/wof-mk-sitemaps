#!/usr/bin/env python

import sys
import os

import requests
import json
import logging

def make_fh(options, i):

    fname = "sitemap-%04d.txt" % i
    path = os.path.join(options.sitemaps, fname)
    fh = open(path, "w")
    
    logging.info("write %s" % path)
    return fh

if __name__ == '__main__':

    import optparse
    opt_parser = optparse.OptionParser()

    opt_parser.add_option('-H', '--host', dest='host', action='store', default='localhost', help='')
    opt_parser.add_option('-p', '--port', dest='port', action='store', default=9200, help='')
    opt_parser.add_option('-i', '--index', dest='index', action='store', default=None, help='')
    opt_parser.add_option('-s', '--sitemaps', dest='sitemaps', action='store', default=None, help='')
    opt_parser.add_option('-u', '--url', dest='url', action='store', default='https://whosonfirst.mapzen.com/spelunker/id', help='')

    opt_parser.add_option('-v', '--verbose', dest='verbose', action='store_true', default=False, help='Be chatty (default is false)')
    options, args = opt_parser.parse_args()

    if options.verbose:
        logging.basicConfig(level=logging.DEBUG)
    else:
        # logging.basicConfig(level=logging.INFO)
        pass

    if not options.index:
        logging.error("Missing index")
        sys.exit(1)

    if not options.sitemaps:
        logging.error("Missing sitemaps")
        sys.exit(1)

    url = "http://%s:%s/%s/_search" % (options.host, options.port, options.index)    

    fields = []

    query = {
        'match_all': {}
    }

    body = {
        'fields': fields,
        'query': query
    }

    body = json.dumps(body)

    total = None

    offset = 0
    size = 10000

    counter = 0
    i = 1

    fh = make_fh(options, i)

    while total == None or total > offset :

        params = {
            'from_': offset,
            'size': size
        }
    
        rsp = requests.post(url, data=body, params=params)
        rsp = json.loads(rsp.content)

        if not total:
            total = rsp['hits']['total']
        
        for h in rsp['hits']['hits']:

            id = h['_id']
            mzurl = os.path.join(options.url, id)
            
            fh.write(mzurl + "\n")

        offset += size
        counter += size

        if counter == 50000:

            fh.close()
            counter = 0

            i += 1
            fh = make_fh(options, i)

    fh.close()

    logging.info("all done")
    sys.exit(0)
